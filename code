Calc

#include <cs50.h>
#include <stdio.h>
#include <math.h>

int main(int argc, string argv[])
{
    //Stoping code if incorrect amount of arrays is entered.
    if (argc != 4)
    {
        printf("Format is ./calc 2 + 2\n");
        return 1;
    }
    
    //Declaring all variables
    float p = atof(argv[1]);
    float y = atof(argv[3]);
    char n = (argv[2][0]);
    float s;
    int apple;
    float bapple;
    
    //Code deciding which equation to use  
    switch (n)
    {
        case '+':
            s = p + y;
            printf("%f\n", s);
            break;
        case '-':
            s = p - y;
            printf("%f\n", s);
            break;
        case '/':
            s = p / y;
            printf("%f\n", s);
            break;
        case 'x':
            s = p * y;
            printf("%fd\n", s);
            break;
        case '%':
            //Modulo loop
            apple = p / y;
            bapple = apple * y;
            s = p - bapple;
            printf("%f\n", s);
            break;
        case 'J':
            return 1;
            break;
            //handles wrong input         
    }   
    
}


Caesar

#include <cs50.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <math.h>

int main(int argc, string argv[])
{
    int key;
    //stops code if the incorrect amount of arrays is inputed in the command line
    if (argc != 2)
    {
        printf("Error: ./caesar <key>\n");
        return 1;
    }
    //sets the key and makes sure that it isn't < 1
    key = atoi(argv[1]);
    if (key < 1)
    {
        printf("Error: Key needs to be a positive int.\n");
        return 1;
    }
    //geting a string to cipher from console
    string plaintext = get_string("plaintext: ");
    printf("ciphertext: ");
    int c;
    int d;
    //for loop that allows if loops to sift through plaintext string
    for (int i = 0; i < strlen(plaintext); i++)
    {
        //Loops where cipher text is created.
        if (isupper(plaintext[i]))
        {
            //checks whether wraping is required for uppercase
            c = plaintext[i] + key;
            if (c > 'Z')
            {
                //actual wraping of letters segment for capitals
                c = (((plaintext[i] - 'A') + key) % 26);
                c = c + 'A';
                printf("%c", c);
            }
            else
            {
                printf("%c", plaintext[i] + key);
            }
        }
        else if (islower(plaintext[i]))
        {
            //checks whether wraping is required for lowercase
            d = plaintext[i] + key;
            if (d > 'z')
            {
                d = ((plaintext[i] - 'a') + key) % 26;
                d = d + 'a';
                printf("%c", d);
            }
            else
            {
                printf("%c", plaintext[i] + key);
            }
        }
        else if (plaintext[i] < 'A' || plaintext[i] > 'Z')
        {
            printf("%c", plaintext[i]);
        }
        else if (plaintext[i] < 'a' || plaintext[i] > 'z')
        {
            printf("%c", plaintext[i]);
        }       
    }
    printf("\n");
}
